"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path
from datetime import timedelta
import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

if not os.getenv("DOCKER_RUNNING"):
    from dotenv import load_dotenv
    load_dotenv()

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# Django Security Settings
SECRET_KEY = os.getenv("SECRET_KEY")
if not SECRET_KEY:
    raise ValueError("SECRET_KEY environment variable is not set.")

TWOFA_ENCRYPTION_KEY = os.getenv("TWOFA_ENCRYPTION_KEY")
if not TWOFA_ENCRYPTION_KEY:
    raise ValueError("TWOFA_ENCRYPTION_KEY environment variable is not set.")

FACEBOOK_APP_ID = os.getenv("FACEBOOK_APP_ID")
if not FACEBOOK_APP_ID:
    raise ValueError("FACEBOOK_APP_ID environment variable is not set. Read Dan's documentation or just put random letters for now to bypass this error!")

FACEBOOK_SECRET = os.getenv("FACEBOOK_SECRET")
if not FACEBOOK_SECRET:
    raise ValueError("FACEBOOK_SECRET environment variable is not set. Read Dan's documentation or just put random letters for now to bypass this error!")

FACEBOOK_REDIRECT_URI = os.getenv("FACEBOOK_REDIRECT_URI")
if not FACEBOOK_REDIRECT_URI:
    raise ValueError("FACEBOOK_REDIRECT_URI environment variable is not set. Read Dan's documentation or just put random letters for now to bypass this error!")

SQUARE_ENV = os.getenv("SQUARE_ENV", "sandbox")
if SQUARE_ENV == "sandbox":
    SQUARE_APP_ID = os.getenv("SQUARE_APP_ID_SANDBOX")
    SQUARE_APP_SECRET = os.getenv("SQUARE_APP_SECRET_SANDBOX")
    SQUARE_BASE_URL = os.getenv("SQUARE_BASE_URL_SANDBOX")
else:
    SQUARE_APP_ID = os.getenv("SQUARE_APP_ID_PROD")
    SQUARE_APP_SECRET = os.getenv("SQUARE_APP_SECRET_PROD")
    SQUARE_BASE_URL = os.getenv("SQUARE_BASE_URL_PROD")

if not SQUARE_APP_ID:
    raise ValueError("SQUARE_APP_ID environment variable is not set.")

if not SQUARE_APP_SECRET:
    raise ValueError("SQUARE_APP_SECRET environment variable is not set.")

SQUARE_REDIRECT_URI = os.getenv("SQUARE_REDIRECT_URI")
if not SQUARE_REDIRECT_URI:
    raise ValueError("SQUARE_REDIRECT_URI environment variable is not set.")

FRONTEND_BASE_URL = os.getenv("FRONTEND_BASE_URL")
if not FRONTEND_BASE_URL:
    raise ValueError("FRONTEND_BASE_URL environment variable is not set.")

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
if not OPENAI_API_KEY:
    raise ValueError("OPENAI_API_KEY environment variable is not set.")

IMGUR_CLIENT_ID = os.getenv("IMGUR_CLIENT_ID")
if not IMGUR_CLIENT_ID:
    raise ValueError("IMGUR_CLIENT_ID environment variable is not set.")

DISCORD_WEBHOOK_URL = os.getenv("DISCORD_WEBHOOK_URL")
if not DISCORD_WEBHOOK_URL:
    raise ValueError("DISCORD_WEBHOOK_URL environment variable is not set.")

TEMP_MEDIA_DISCORD_WEBHOOK = os.getenv("TEMP_MEDIA_DISCORD_WEBHOOK", "False") == "True"


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG", "False") == "True"
ALLOWED_HOSTS = [
    host.strip() for host in os.getenv("ALLOWED_HOSTS", "localhost,127.0.0.1").split(",") if host
]


# Application definition
INSTALLED_APPS = [
    "drf_spectacular",
    "rest_framework",
    'rest_framework_simplejwt', # JWT Authentication
    "corsheaders",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'users',
    'businesses',
    'social',
    'posts',
    'promotions',
    'ai',
    'sales',
    "django_extensions",
]

# JWT Settings
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=1),
    "AUTH_HEADER_TYPES": ("Bearer",),

    # HttpOnly Cookie
    "AUTH_COOKIE": "access_token",
    "AUTH_COOKIE_HTTP_ONLY": True,
    "AUTH_COOKIE_SECURE": True,
    "AUTH_COOKIE_PATH": "/",
    "AUTH_COOKIE_SAMESITE": "None",
}

SESSION_COOKIE_SECURE = SIMPLE_JWT["AUTH_COOKIE_SECURE"]
SESSION_COOKIE_SAMESITE = "None"

# CSRF Settings
CSRF_COOKIE_SECURE = SIMPLE_JWT["AUTH_COOKIE_SECURE"]
CSRF_COOKIE_DOMAIN = None 
CSRF_TRUSTED_ORIGINS = os.getenv("CSRF_TRUSTED_ORIGINS", "https://localhost:3000,https://127.0.0.1:3000").split(",")

# CORS Settings
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_ORIGINS = CORS_ALLOWED_ORIGINS = os.getenv(
    "CORS_ALLOWED_ORIGINS",
    "https://localhost:3000,https://127.0.0.1:3000,https://ai-marketer-v2-frontend.vercel.app"
).split(",")

# DRF Default Authentication Settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        "users.authentication.CustomJWTAuthentication", # http cookie
    ),
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
}

# Middleware Settings
MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware", # Add CORS middleware near the top
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# Django Admin & Template Setting
ROOT_URLCONF = "backend.urls"
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]
WSGI_APPLICATION = "backend.wsgi.application"

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases
DATABASES = {
    "default": dj_database_url.config(default=os.getenv("DATABASE_URL"))
    if os.getenv("USE_RENDER_DB", "False") == "True"
    else {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("POSTGRES_DB"),
        "USER": os.getenv("POSTGRES_USER"),
        "PASSWORD": os.getenv("POSTGRES_PASSWORD"),
        "HOST": os.getenv("POSTGRES_HOST"),
        "PORT": os.getenv("POSTGRES_PORT"),
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

# AUTH_PASSWORD_VALIDATORS = [
#     {
#         "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
#     },
#     {
#         "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
#     },
#     {
#         "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
#     },
#     {
#         "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
#     },
# ]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

# LANGUAGE_CODE = "en-us"
#
TIME_ZONE = 'UTC'
#
# USE_I18N = True
#
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Django Auth Setting
AUTH_USER_MODEL = 'users.User'
AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
]

# Email
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True

EMAIL_HOST_USER = 'akastudioaimarketer@gmail.com'
EMAIL_HOST_PASSWORD = 'sibo nkqr khpp yxwr'
DEFAULT_FROM_EMAIL = 'AI Marketer <akastudioaimarketer@gmail.com>'

# Logging
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "[{levelname}] {asctime} {module}: {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
    },
    "root": {
        "level": "INFO",
        "handlers": ["console"],
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": False,
        },
        "users": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": False,
        },
    },
}